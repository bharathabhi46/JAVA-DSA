
import java.util.*;

public class BinaryTreeLevelOrderTraversal {

    static class TreeNode {

        int val;
        TreeNode left, right;

        TreeNode(int val) {
            this.val = val;
        }

        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }

    public static List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }

        Queue<TreeNode> q = new LinkedList<>();
        List<Integer> l = new ArrayList<>();
        q.add(root);
        q.add(null);

        while (!q.isEmpty()) {
            TreeNode curNode = q.remove();
            if (curNode == null) {
                res.add(new ArrayList<>(l));
                l.clear();
                if (q.isEmpty()) {
                    break;
                } else {
                    q.add(null);
                }
            } else {
                l.add(curNode.val);
                if (curNode.left != null) {
                    q.add(curNode.left);
                }
                if (curNode.right != null) {
                    q.add(curNode.right);
                }
            }
        }

        return res;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20, new TreeNode(15), new TreeNode(7));

        List<List<Integer>> result = levelOrderBottom(root);

        System.out.println("Bottom-Up Level Order:");
        for (List<Integer> level : result) {
            System.out.println(level);
        }
    }
}
