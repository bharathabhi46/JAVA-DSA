
public class CheckPalindrome {

    public static void main(String[] args) {
        StringBuilder s = new StringBuilder("madam");
        int n = s.length();
        StringBuilder rev = new StringBuilder(s);
        // METHOD - 1 => TWO POINTERS
        int p1 = 0;
        int p2 = n - 1;
        while (p1 != p2) {
            char a = s.charAt(p1);
            char b = s.charAt(p2);
            s.setCharAt(p1, b);
            s.setCharAt(p2, a);
            p1++;
            p2--;
        }
        System.out.println(s);
        System.out.println(rev);
        if (s.toString().equals(rev.toString())) {
            System.out.println(true);
        } else {
            System.out.println(false);
        }
        // TIME COMPLEXITY => O(n);
        // SPACE COMPLEXITY => O(1);

        // METHOD - 2 => IN - BUILT METHODS 
        s.reverse();
        if (s.toString().equals(rev.toString())) {
            System.out.println(true);
        } else {
            System.out.println(false);
        }
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(1)
        // METHOD - 3 => SWAPPING THE CHARACTERS
        for (int i = 0; i < n / 2; i++) {
            char a = s.charAt(i);
            s.setCharAt(i, s.charAt(n - i - 1));
            s.setCharAt(n - i - 1, a);
        }
        if (s.toString().equals(rev.toString())) {
            System.out.println(true);
        } else {
            System.out.println(false);
        }
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(1)
    }
}
