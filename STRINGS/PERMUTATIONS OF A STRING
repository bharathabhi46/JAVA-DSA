
import java.util.Arrays;

public class PermutationOfAString {

    // METHOD - 1 => IN PLACE RECURSION (BACK TRACKING)
    // public static void Permutation(char arr[], int index) {
    //     if (index == arr.length) {
    //         System.out.println(new String(arr));
    //         return;
    //     }
    //     for (int i = index; i < arr.length; i++) {
    //         // swap the index with i position in the arr;
    //         swp(arr, index, i);
    //         // for next permutation
    //         Permutation(arr, index + 1);
    //         // backtrack to the original array
    //         swp(arr, index, i);
    //     }
    // }
    // public static void swp(char arr[], int i, int j) {
    //     char temp = arr[i];
    //     arr[i] = arr[j];
    //     arr[j] = temp;
    // }
    // // TIME COMPLEXITY => O(n!)
    // // SPACE COMPLEXITY => O(n)
    // METHOD - 2 ITERATIVE APPROACH
    public static void Permutation(String s) {
        char arr[] = s.toCharArray();
        Arrays.sort(arr);
        System.out.println(arr);
        while (nextPermutation(arr)) {
            System.out.println(new String(arr));
        }
    }

    public static boolean nextPermutation(char arr[]) {
        int i = arr.length - 1;
        // finding the pivot element (smallest ele which is next to the greater ele)
        while (i > 0 && arr[i - 1] >= arr[i]) {
            i--;
        }
        if (i <= 0) {
            return false;
        }
        // finding the next greater ele right towards the pivot element 
        int j = arr.length - 1;
        while (arr[j] <= arr[i - 1]) {
            j--;
        }
        swp(arr, i - 1, j);
        rev(arr, i, arr.length - 1);
        return true;
    }

    public static void swp(char arr[], int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void rev(char arr[], int i, int j) {
        while (i < j) {
            swp(arr, i++, j--);
        }
    }

    public static void main(String args[]) {
        String s = "abc";
        // char arr[] = s.toCharArray();
        Permutation(s);
    }
}
