
public class MinimumCharsToAddToStringToMakePalindrome {

    public static void main(String[] args) {
        // METHOD - 1 => USING LPS 
        // String str = "abc";
        // int n = str.length();
        // StringBuilder s = new StringBuilder(str);
        // StringBuilder rev = new StringBuilder(s).reverse();
        // String com = s + "@" + rev;
        // int m = com.length();
        // int lps[] = new int[m];
        // int len = 0;
        // lps[0] = 0;
        // int i = 1;
        // while (i < m) {
        //     if (com.charAt(i) == com.charAt(len)) {
        //         len++;
        //         lps[i] = len;
        //         i++;
        //     } else if (i < m && com.charAt(i) != com.charAt(len)) {
        //         if (len != 0) {
        //             len = lps[len - 1];
        //         } else {
        //             lps[i] = 0;
        //             i++;
        //         }
        //     }
        // }
        // String add = rev.substring(0, n - lps[m - 1]);
        // System.out.println(add.length());
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(n)

        // METHOD - 2 => CHECKING THE FIRST AND LAST CHAR FOR PALINDROME
        String s = "cac";
        int n = s.length();
        int i = 0;
        int j = n - 1;
        int c = 0;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                c++;
                j--;
            } else {
                i++;
                j--;
            }
        }
        System.out.println(c);
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(1)
    }
}
