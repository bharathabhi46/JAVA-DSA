
public class StringRotationOfOtherString {

    public static int[] calculatePrefix(String pat) {
        int n = pat.length();
        int lps[] = new int[n];
        lps[0] = 0;
        int len = 0;
        int i = 1;
        while (i < n) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    public static boolean checkRotation(String txt, String pat) {
        int n = txt.length();
        int m = pat.length();
        int lps[] = calculatePrefix(pat);
        int i = 0;
        int j = 0;
        while (i < n) {
            if (pat.charAt(j) == txt.charAt(i)) {
                i++;
                j++;

                if (j == m) {
                    return true;
                }
            } else if (i < n && pat.charAt(j) != txt.charAt(i)) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }

            }
        }
        return false;
    }

    public static void main(String[] args) {
        // String s1 = "madam";
        // String s2 = "mdaam";
        // METHOD - 1 => SORTING TWO STRINGS
        // char ss1[] = s1.toCharArray();
        // char ss2[] = s2.toCharArray();
        // Arrays.sort(ss1);
        // Arrays.sort(ss2);
        // if (Arrays.equals(ss1, ss2)) {
        //     System.out.println(true);
        // } else {
        //     System.out.println(false);
        // }
        // TIME COMPLEXITY => O(n log n)
        // SPACE COMPLEXITY => O(n)

        // METHOD - 2 => ACCESSING THE LAST CHAR AND ADDING IT TO START
        // String s1 = "madam";
        // String s2 = "adamm";
        // for (int i = 0; i < s1.length(); i++) {
        //     if (s1.equals(s2)) {
        //         System.out.println(true);
        //     }
        //     char last = s1.charAt(s1.length() - 1);
        //     s1 = last + s1.substring(0, s1.length() - 1);
        // }
        // TIME COMPLEXITY => O(n^2)
        // SPACE COMPLEXITY => O(n)

        ///     METHOD - 3 KMP ALGORITHM
        String s1 = "abxabcabcaby";
        String s2 = "abcaby";

        System.out.println(checkRotation(s1, s2));
    }
}
