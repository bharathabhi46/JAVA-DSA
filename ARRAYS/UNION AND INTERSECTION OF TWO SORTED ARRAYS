
public class UnionAndInt {

    public static void main(String[] args) {
        int a1[] = {1, 1, 2, 3, 4};
        int a2[] = {1, 2, 3, 5, 6};
        int n = a1.length;
        int m = a2.length;
        // UNION
        int len = n + m;
        int arr[] = new int[len];
        int i = 0, j = 0, k = 0;
        while (i < n && j < m) {
            if (a1[i] < a2[j]) {
                if (k == 0 || arr[k - 1] != a1[i]) {
                    arr[k++] = a1[i];
                }
                i++;
            } else if (a1[i] > a2[j]) {
                if (k == 0 || arr[k - 1] != a2[j]) {
                    arr[k++] = a2[j];
                }
                j++;
            } else {
                if (k == 0 || arr[k - 1] != a1[i]) {
                    arr[k++] = a1[i];
                }
                i++;
                j++;
            }
        }
        while (i < n) {
            if (k == 0 || arr[k - 1] != a1[i]) {
                arr[k++] = a1[i];
            }
            i++;
        }
        while (j < m) {
            if (k == 0 || arr[k - 1] != a2[j]) {
                arr[k++] = a2[j];
            }
            j++;
        }
        int l = arr.length;
        for (int h = 0; h < l; h++) {
            System.out.print(arr[h] + " ");
        }
        // TIME COMPLEXITY => O(m+n)
        // SPACE COMPLEXITY => O(m+n)

        // INTERSECTION
        System.out.println();
        int a[] = new int[n + m];
        while (i < n && j < m) {
            if (a1[i] == a2[j]) {
                if (k == 0 || a[k - 1] != a1[i]);
                {
                    a[k++] = a1[i];
                }
                i++;
                j++;
            } else if (a1[i] < a2[j]) {
                i++;
            } else {
                j++;
            }
        }
        for (int t = 0; t < a.length; t++) {
            System.out.print(a[t] + " ");
        }
        // TIME COMPLEXITY => O(m+n)
        // SPACE COMPLEXITY => O(m+n)
    }
}
