
public class MoveNeg {

    public static void main(String args[]) {
        // METHOD - 1 => SORTING THE ARRAY 
        int arr[] = {-1, 5, -2, 4, 6, -10, -19};
        // Arrays.sort(arr);
        int n = arr.length;
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        // TIME COMPLEXITY => O(n log n) => HYBRID OF MERGE SORT AND INSERTION SORT
        // SPACE COMPLExITY= => O(1)

        // METHOD - 2 TWO POINTER
            int p1 = 0;
            int p2 = n - 1;
            while (p1 < p2) {
                while (p1 < p2 && arr[p1] < 0) {
                    p1++;
                }
                while (p1 < p2 && arr[p2] > 0) {
                    p2--;
                }
                if (p1 < p2) {
                    int temp = arr[p1];
                    arr[p1] = arr[p2];
                    arr[p2] = temp;
                    p1++;
                    p2--;
                }
            }
            for (int i = 0; i < n; i++) {
                System.out.print(arr[i] + " ");
            }
        
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(1)
        // METHOD - 3 => KEEPING TRACK OF PREVIOUS ELEMENT GREATER THAN 0
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] < 0) {
                int temp = arr[j];
                arr[j] = arr[i];
                arr[i] = temp;
                j++;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(1)

    }
}
