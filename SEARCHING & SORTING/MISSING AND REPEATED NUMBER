
public class MissingAndRepeating {

    public static void main(String[] args) {
        // METHOD - 1 => IN PLACE INDEX MARKING
        // REPEATING NUMBER
        // int arr[] = {4, 3, 6, 2, 1, 1};
        // int n = arr.length;
        // int repeating = -1;
        // int missing = -1;
        // for (int i = 0; i < n; i++) {
        //     int index = Math.abs(arr[i]) - 1;
        //     if (arr[index] < 0) {
        //         repeating = Math.abs(arr[i]);
        //     } else {
        //         arr[index] = -arr[index];
        //     }
        // }
        // // MISSING NUMBER
        // for (int i = 0; i < n; i++) {
        //     if (arr[i] > 0) {
        //         missing = i + 1;
        //         break;
        //     }
        // }
        // System.out.println(repeating);
        // System.out.println(missing);
        // METHOD - 2 => BRUTE FORCE APPROACH
        int arr[] = {4, 3, 6, 2, 1, 1};
        int n = arr.length;
        int fre[] = new int[n + 1];
        for (int num : arr) {
            fre[num]++;
        }
        int repeating = -1;
        int missing = -1;
        for (int i = 1; i <= n; i++) {
            if (fre[i] == 0) {
                missing = i;
            } else if (fre[i] == 2) {
                repeating = i;
            }
        }
        System.out.println(repeating);
        System.out.println(missing);
    }
}
// TIME COMPLEXITY => O(n)
// SPACE COMPLEXITY => O(1)
