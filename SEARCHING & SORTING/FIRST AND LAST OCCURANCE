
public class FirstAndLastOccurance {
// METHOD - 1 => USING THE BINARY SEARCH (OPTIMIZED)
    // public static void bsl(int nums[], int target, int arr[]) {
    //     int l = 0;
    //     int h = nums.length - 1;
    //     while (l <= h) {
    //         int m = (l + h) / 2;
    //         if (nums[m] == target) {
    //             arr[0] = m;
    //             h = m - 1;
    //         } else if (nums[m] < target) {
    //             l = m + 1;
    //         } else {
    //             h = m - 1;
    //         }
    //     }
    // }

    // public static void bsr(int nums[], int target, int arr[]) {
    //     int l = 0;
    //     int h = nums.length - 1;
    //     while (l <= h) {
    //         int m = (l + h) / 2;
    //         if (nums[m] == target) {
    //             arr[1] = m;
    //             l = m + 1;
    //         } else if (nums[m] < target) {
    //             l = m + 1;
    //         } else {
    //             h = m - 1;
    //         }
    //     }
    // }
    // METHOD - 2 BINARY SEARCH WITH TWO POINTERS
    public static void bs(int nums[], int target, int arr[]) {
        int l = 0;
        int h = nums.length - 1;
        int m = -1;
        while (l <= h) {
            m = (l + h) / 2;
            if (nums[m] == target) {
                break;
            } else if (nums[m] < target) {
                l = m + 1;
            } else {
                h = m - 1;
            }
        }
        int p1 = m;
        int p2 = m;
        while (p1 > 0 && nums[p1 - 1] == target) {
            p1--;
        }
        while (p2 < nums.length - 1 && nums[p2 + 1] == target) {
            p2++;
        }
        arr[0] = p1;
        arr[1] = p2;
    }

    public static void main(String args[]) {
        int nums[] = {5, 7, 7, 8, 8, 10};
        int target = 8;
        int arr[] = {-1, - 1};
        // bsl(nums, target, arr);
        // bsr(nums, target, arr);
        bs(nums, target, arr);
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
// 1ST APPROACH 
// TIME COMPLEXITY => O(log n + log n)
// SPACE COMPLEXITY => O(1)
// 2ND APPROACH 
// TIME COMPLEXITY => O(log n + KS)
// SPACE COMPLEXITY => O(1)
