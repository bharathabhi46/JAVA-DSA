
public class SearchInRotatedSorted {
// METHOD - 1 => TWO STEP APPROACH(PIVOT + BINARY SEACH)

    // public static int findPivot(int arr[], int target) {
    //     int l = 0;
    //     int h = arr.length - 1;
    //     while (l < h) {
    //         int m = (l + h) / 2;
    //         if (arr[m] > arr[h]) {
    //             l = m + 1;
    //         } else {
    //             h = m;
    //         }
    //     }
    //     return l;
    // }
    // public static int bs(int arr[], int target, int l, int h) {
    //     while (l <= h) {
    //         int m = (l + h) / 2;
    //         if (arr[m] == target) {
    //             return m;
    //         } else if (arr[m] < target) {
    //             l = m + 1;
    //         } else {
    //             h = m - 1;
    //         }
    //     }
    //     return -1;
    // }
    // public static void main(String args[]) {
    //     int arr[] = {4, 5, 6, 7, 0, 1, 2};
    //     int n = arr.length;
    //     int target = 0;
    //     int pivot = findPivot(arr, target);
    //     if (target >= arr[pivot] && target <= arr[n - 1]) {
    //         System.out.println(bs(arr, target, pivot, n - 1));
    //     } else {
    //         System.out.println(bs(arr, target, 0, pivot - 1));
    //     }
    // }
    // TIME COMPLEXITY => O(log n)
    // SPACE COMPLEACOTY => O(1)
    // METHOD - 2 => BINARY SEARCH (LEFT HALF AND RIGHT HALF)
    public static int bs(int arr[], int target) {
        int l = 0;
        int h = arr.length - 1;
        while (l <= h) {
            int m = (l + h) / 2;
            if (arr[m] == target) {
                return m;
            }
            if (arr[l] <= arr[m]) {
                if (arr[l] <= target && arr[m] >= target) {
                    h = m - 1;
                } else {
                    l = m + 1;
                }
            } else {
                if (arr[h] >= target && target >= arr[m]) {
                    l = m + 1;
                } else {
                    h = m - 1;
                }
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int arr[] = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;
        System.out.println(bs(arr, target));
    }
}
// TIME COMPLEXITY => O(log n)
// SPACE COMPLEXITY => O(1)
