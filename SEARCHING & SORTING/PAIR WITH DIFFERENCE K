
import java.util.*;

public class PairWithDifferenceK {

    public static void main(String[] args) {
        int nums[] = {3, 14, 4, 8, 9};
        int k = 2;
        // METHOD - 1 => USING THE HASHSET
        boolean found = false;
        // HashSet<Integer> set = new HashSet<>();
        // for (int num : nums) {
        //     if (set.contains(num - k) || set.contains(num + k)) {
        //         found = true;
        //         break;
        //     } else {
        //         set.add(num);
        //     }
        // }
        // if (found) {
        //     System.out.println(true);
        // } else {
        //     System.out.println(false);
        // }
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(n)

        // METHOD - 2 => TWO POINTER APPROACH
        int p1 = 0;
        int p2 = nums.length - 1;
        Arrays.sort(nums);
        while (p1 <= p2) {
            int sum = nums[p1] + nums[p2];
            if (sum == k) {
                found = true;
            } else if (sum < k) {
                p1++;
            } else {
                p2--;
            }
        }
        if (found) {
            System.out.println(true);
        } else {
            System.out.println(false);
        }
        // TIME COMPLEXITY => O(n log n)
        // SPACE COMPLEXITY => O(1)
    }
}
