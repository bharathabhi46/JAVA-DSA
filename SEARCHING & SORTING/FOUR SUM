// import java.util.*;

// public class FourSum {
//     public static void main(String[] args) {
//         // METHOD - 1 TWO POINTER + SORTING
//         int arr[] = {-2, -1, 0, 0, 1, 2};
//         int n = arr.length;
//         List<List<Integer>> re = new ArrayList<>();
//         int target = 0;
//         for (int i = 0; i < n - 3; i++) {
//             if (i > 0 && arr[i] == arr[i - 1]) {
//                 continue;
//             }
//             for (int j = i + 1; j < n - 2; j++) {
//                 if (j > i + 1 && arr[j] == arr[j - 1]) {
//                     continue;
//                 }
//                 int l = j + 1;
//                 int r = n - 1;
//                 while (l < r) {
//                     int sum = arr[i] + arr[j] + arr[l] + arr[r];
//                     if (sum == target) {
//                         re.add(Arrays.asList(arr[i], arr[j], arr[l], arr[r]));
//                         while (l < r && arr[l] == arr[l + 1]) {
//                             l++;
//                         }
//                         while (l < r && arr[r] == arr[r - 1]) {
//                             r--;
//                         }
//                         l++;
//                         r--;
//                     } else if (sum < target) {
//                         l++;
//                     } else {
//                         r--;
//                     }
//                 }
//             }
//         }
//         for (List<Integer> num : re) {
//             System.out.println(num);
//         }
//         // TIME COMPLEXITY => O(n^4)
//         // SPACE COMPLEXITY => O(k)
//     }
// }
// METHOD - 2 BRUTE FORCE APPROACH
import java.util.*;

class FourSum {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Set<List<Integer>> resultSet = new HashSet<>();  // to avoid duplicates

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    for (int l = k + 1; l < n; l++) {
                        long sum = (long) nums[i] + nums[j] + nums[k] + nums[l]; // to prevent overflow
                        if (sum == target) {
                            List<Integer> quad = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);
                            Collections.sort(quad);  // sort to normalize order
                            resultSet.add(quad);  // add to set to avoid duplicates
                        }
                    }
                }
            }
        }

        // Convert Set to List
        return new ArrayList<>(resultSet);
    }
}
