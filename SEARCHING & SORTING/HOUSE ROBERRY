
public class HouseRob {

    public static int rob(int arr[], int index, int memo[]) {
        // METHOD - 1 => OPTIMIZED DYNAMIC PROGRAMMING
        // int n = arr.length;
        // if (n == 0) {
        //     return 0;
        // }
        // if (n == 1) {
        //     return arr[0];
        // }
        // int prev1 = arr[0];
        // int prev2 = Math.max(arr[0], arr[1]);
        // for (int i = 2; i < n; i++) {
        //     int cur = Math.max(prev2, prev1 + arr[i]);
        //     prev1 = prev2;
        //     prev2 = cur;
        // }
        // return prev2;
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY =>O(1)

        // METHOD - 2 RECURSION + BACKTRACKING
        if (index >= arr.length) {
            return 0;
        }
        if (memo[index] != 0) {
            return memo[index];
        }
        int in = arr[index] + rob(arr, index + 2, memo);
        int ex = rob(arr, index + 1, memo);
        memo[index] = Math.max(in, ex);
        return memo[index];
    }

    public static void main(String args[]) {
        int[] arr = {2, 7, 9, 3, 1};
        int memo[] = new int[arr.length];
        System.out.println(rob(arr, 0, memo));
    }
}
