
public class MaxAndMin {

    public static void main(String args[]) {
        int arr[] = {4, 2, 5, 1, 3};
        int n = arr.length;
        // METHOD - 1 => USING MAX VALUE AND MIN VALUE 
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        System.out.println(min);
        System.out.println(max);
        // TIME COMPLEXITY => O(n)
        // SPACE COMPLEXITY => O(1)

        // METHOD - 2 SORTING THE ARRAY
        Arrays.sort(arr);
        int maxi = arr[n - 1];
        int mini = arr[0];
        System.out.println(maxi);
        System.out.println(mini);
        // TIME COMPLEXITY => O(n Log n) IT IS HYBRID OF INSERTION AND MERGE SORT
        // SPACE COMPLEXITY => O(1)
        // METHOD - 3 => CHECKING PAIRWISE
        int min;
        int max;
        int i;
        if (n % 2 == 0) {
            if (arr[0] < arr[1]) {
                min = arr[0];
                max = arr[1];
            } else {
                min = arr[1];
                max = arr[0];
            }
            i = 2;
        } else {
            min = max = arr[0];
            i = 1;
        }
        while (i < n - 1) {
            if (arr[i] < arr[i + 1]) {
                if (arr[i] < min) {
                    min = arr[i];
                }
                if (arr[i + 1] > max) {
                    max = arr[i + 1];
                }
            } else {
                if (arr[i + 1] < min) {
                    min = arr[i + 1];
                }
                if (arr[i] > max) {
                    max = arr[i];
                }
            }
            i += 2;
        }
        System.out.println(min);
        System.out.println(max);
    }
}
