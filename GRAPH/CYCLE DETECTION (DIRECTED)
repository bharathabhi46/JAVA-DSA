class Solution {
    public class Edge{
        int dt;
        public Edge(int d){
            this.dt = d;
        }
    }

    public void createGraph(ArrayList<Edge> graph[], int edges[][], int V){
        for(int i=0;i<V;i++){
            graph[i] = new ArrayList<Edge>();
        }
        for(int i=0;i<edges.length;i++){
        int u = edges[i][0];
        int v = edges[i][1];
        graph[u].add(new Edge(v));
    }
    }
    public boolean dfs(ArrayList<Edge> graph[], boolean vis[], int cur, boolean rec[]){
        vis[cur] = true;
        rec[cur] = true;
        for(int i=0;i<graph[cur].size();i++){
            Edge e = graph[cur].get(i);
            if(rec[e.dt] == true){
                return true;
            }
            if(!vis[e.dt]){
                if(dfs(graph, vis, e.dt, rec)){
                    return true;
                }
            }
        }
        rec[cur] = false;
        return false;
    }
    public boolean isCyclic(int V, int[][] edges) {
        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph, edges, V);
        boolean vis[] = new boolean[V];
        boolean rec[] = new boolean[V];
        try {
            for(int i=0;i<V;i++){
                if(!vis[i]){
                    if(dfs(graph, vis, i, rec)){
                        return true;
                    }
                }
            }
        } catch(StackOverflowError e){
            return true; // assume cycle exists if overflow
        }
        return false;
    }
}
