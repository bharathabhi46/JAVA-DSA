
import java.util.*;

public class SearchInAMaze {

    public static ArrayList<String> ratInMaze(int[][] maze) {
        ArrayList<String> result = new ArrayList<>();
        int n = maze.length;

        if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0) {
            return result;
        }

        boolean[][] visited = new boolean[n][n];
        dfs(0, 0, maze, n, visited, "", result);

        Collections.sort(result); // lexicographical order
        return result;
    }

    public static void dfs(int i, int j, int[][] maze, int n, boolean[][] visited, String path, ArrayList<String> result) {
        if (i < 0 || j < 0 || i >= n || j >= n || visited[i][j] || maze[i][j] == 0) {
            return;
        }

        if (i == n - 1 && j == n - 1) {
            result.add(path);
            return;
        }

        visited[i][j] = true;

        // Move Down
        dfs(i + 1, j, maze, n, visited, path + 'D', result);
        // Move Left
        dfs(i, j - 1, maze, n, visited, path + 'L', result);
        // Move Right
        dfs(i, j + 1, maze, n, visited, path + 'R', result);
        // Move Up
        dfs(i - 1, j, maze, n, visited, path + 'U', result);

        visited[i][j] = false; // Backtrack
    }

    public static void main(String[] args) {
        int[][] maze = {
            {1, 0, 0, 0},
            {1, 1, 0, 1},
            {0, 1, 0, 0},
            {1, 1, 1, 1}
        };

        ArrayList<String> paths = ratInMaze(maze);

        if (paths.size() == 0) {
            System.out.println("No path found");
        } else {
            System.out.println("All possible paths:");
            for (String path : paths) {
                System.out.println(path);
            }
        }
    }
}
