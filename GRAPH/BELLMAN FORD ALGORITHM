
import java.util.*;

public class BellmanFordAlgo {

    static class Edge {

        int dt;
        int wt;

        public Edge(int d, int w) {
            this.dt = d;
            this.wt = w;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[], int[][] edges) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < edges.length; i++) {
            int s = edges[i][0];
            int d = edges[i][1];
            int w = edges[i][2];
            graph[s].add(new Edge(d, w));
        }
    }

    public static int bF(ArrayList<Edge> graph[], int n, int src) {
        int dest[] = new int[n];
        Arrays.fill(dest, Integer.MAX_VALUE);
        dest[src] = 0;

        for (int k = 0; k < n - 1; k++) {
            for (int i = 0; i < n; i++) {
                for (Edge e : graph[i]) {
                    int v = e.dt;
                    int w = e.wt;
                    if (dest[i] != Integer.MAX_VALUE && dest[i] + w < dest[v]) {
                        dest[v] = dest[i] + w;
                    }
                }
            }
        }

        // Extra iteration to detect negative weight cycle
        for (int i = 0; i < n; i++) {
            for (Edge e : graph[i]) {
                int v = e.dt;
                int w = e.wt;
                if (dest[i] != Integer.MAX_VALUE && dest[i] + w < dest[v]) {
                    return 1; // Negative weight cycle exists
                }
            }
        }
        return 0; // No negative weight cycle
    }

    public static int isNegativeWeightCycle(int n, int[][] edges) {
        ArrayList<Edge> graph[] = new ArrayList[n];
        createGraph(graph, edges);
        // Check from all nodes to handle disconnected components
        for (int src = 0; src < n; src++) {
            if (bF(graph, n, src) == 1) {
                return 1;
            }
        }
        return 0;
    }

    public static void main(String[] args) {
        // Sample input
        int n = 5;
        int[][] edges = {
            {1, 0, 5},
            {1, 2, -2},
            {1, 4, 6},
            {2, 3, 3},
            {3, 1, -4}
        };

        int result = isNegativeWeightCycle(n, edges);
        if (result == 1) {
            System.out.println("Negative weight cycle exists.");
        } else {
            System.out.println("No negative weight cycle.");
        }
    }
}
