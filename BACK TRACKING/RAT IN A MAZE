class Solution {
    public static void f(int n, int[][] maze, int i, int j, ArrayList<String> re, boolean vis[][], StringBuilder str){
        if(i == maze.length-1 && j==maze.length-1){
            re.add(str.toString());
            return;
        }
        if(i+1<n && vis[i+1][j]==false && maze[i+1][j]!=0){
            vis[i][j] = true;
            str.append('D');
            f(n, maze, i+1, j, re, vis, str);
            vis[i][j]= false;
            str.deleteCharAt(str.length() - 1);
        }
        if(j-1>=0 && vis[i][j-1]==false && maze[i][j-1]!=0){
            vis[i][j] = true;
            str.append('L');
            f(n, maze, i, j-1, re, vis, str);
            vis[i][j]= false;
            str.deleteCharAt(str.length() - 1);
        }
        if(j+1<n && vis[i][j+1]==false && maze[i][j+1]!=0){
            vis[i][j] = true;
            str.append('R');
            f(n, maze, i, j+1, re, vis, str);
            vis[i][j]= false;
            str.deleteCharAt(str.length() - 1);
        }
        if(i-1>=0 && vis[i-1][j]==false && maze[i-1][j]!=0){
            vis[i][j] = true;
            str.append('U');
            f(n, maze, i-1, j, re, vis, str);
            vis[i][j]= false;
            str.deleteCharAt(str.length() - 1);
        }
    }
    public ArrayList<String> ratInMaze(int[][] maze) {
        int n = maze.length;
        ArrayList<String> re = new ArrayList<>();
        StringBuilder str = new StringBuilder();
        boolean vis[][] = new boolean[n][n];
        f(n, maze, 0, 0, re, vis, str);
        return re;
    }
}
