
import java.util.*;

public class ReverseFirstKEleFromQueue {

    public static Queue<Integer> reverseFirstK(Queue<Integer> q, int k) {
        if (q == null || k <= 0 || k > q.size()) {
            return q;
        }
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < k; i++) {
            s.push(q.poll());
        }
        while (!s.isEmpty()) {
            q.offer(s.pop());
        }
        int size = q.size() - k;
        for (int i = 0; i < size; i++) {
            q.offer(q.poll());
        }
        return q;
    }

    public static void main(String[] args) {
        Queue<Integer> q = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5));
        int k = 3;

        Queue<Integer> result = reverseFirstK(q, k);

        System.out.println(result);  // Output: [3, 2, 1, 4, 5]
    }
}
