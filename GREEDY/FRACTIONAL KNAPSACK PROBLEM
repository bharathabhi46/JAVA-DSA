
import java.util.*;

class fractionalKnapsack {

    static class dS {

        int v;
        int w;
        double rw;

        public dS(int v, int w) {
            this.v = v;
            this.w = w;
            this.rw = (double) v / w;
        }
    }

    public static double fKnapsack(int[] val, int[] wt, int capacity) {
        int n = val.length;
        List<dS> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(new dS(val[i], wt[i]));
        }
        Collections.sort(l, (a, b) -> Double.compare(b.rw, a.rw));
        double re = 0.0;
        for (int i = 0; i < l.size() && capacity > 0; i++) {
            dS item = l.get(i);
            if (item.w <= capacity) {
                re += item.v;
                capacity -= item.w;
            } else {
                re += item.rw * capacity;
                capacity = 0;
            }
        }
        return re;
    }

    public static void main(String[] args) {
        int[] val = {60, 100, 120};
        int[] wt = {10, 20, 30};
        int capacity = 50;
        System.out.println(fKnapsack(val, wt, capacity));
    }
}
