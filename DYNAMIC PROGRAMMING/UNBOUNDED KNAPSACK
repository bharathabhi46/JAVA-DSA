// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    static int knapSack(int val[], int wt[], int capacity) {
        int n = val.length;
        dp = new int[n][capacity+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=capacity;j++){
                dp[i][j] = -1;
            }
        }
        return solve(n-1, capacity, val, wt);
    }
    static int solve(int i, int cap, int[] val, int[] wt){
        if(i == 0){
            return (cap / wt[0]) * val[0];
        }
        if(dp[i][cap] != -1) return dp[i][cap];
        int notTake = solve(i-1, cap, val, wt);
        int take = Integer.MIN_VALUE;
        if(wt[i] <= cap){
            take = val[i] + solve(i, cap - wt[i], val, wt);
        }
        return dp[i][cap] = Math.max(notTake, take);
    }
}

// TABULATION
class Solution {
    static int dp[][];
    static int knapSack(int val[], int wt[], int capacity) {
        int n = val.length;
        int k = capacity;
        dp = new int[n][k+1];
        for(int i=0;i<=k;i++){
            dp[0][i] = (i/wt[0])*val[0];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<=k;j++){
                int nT = dp[i-1][j];
                int T = Integer.MIN_VALUE;
                if(wt[i]<=j){
                    T = val[i] + dp[i][j-wt[i]];
                }
                dp[i][j] = Math.max(nT, T);
            }
        }
        return dp[n-1][k];
    }
}
