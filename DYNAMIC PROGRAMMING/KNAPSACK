// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    public static int kS(int n, int val[], int wt[], int W){
        if(n==0){
            if(wt[n]<=W){
                return val[n];
            }else{
                return 0;
            }
        }
        if(dp[n][W]!=-1){
            return dp[n][W];
        }
        int nT = 0 + kS(n-1, val, wt, W);
        int T = Integer.MIN_VALUE;
        if(wt[n]<=W){
            T = val[n] + kS(n-1, val, wt, W-wt[n]);
        }
        return dp[n][W] = Math.max(nT, T);
    }
    static int knapsack(int W, int val[], int wt[]) {
        int n = val.length;
        dp = new int[n][W+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=W;j++){
                dp[i][j] = -1;
            }
        }
        return kS(n-1, val, wt, W);
    }
}
// TABULATION
class Solution {
    static int dp[][];
    static int knapsack(int W, int val[], int wt[]) {
        int n = val.length;
        dp = new int[n][W+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=W;j++){
                dp[i][j] = 0;
            }
        }
        for(int i=wt[0];i<=W;i++){
            dp[0][i] = val[0];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<=W;j++){
                int nT = 0 + dp[i-1][j];
                int T = Integer.MIN_VALUE;
                if(wt[i]<=j){
                    T = val[i] + dp[i-1][j-wt[i]];
                }
                dp[i][j] = Math.max(nT, T);
            }
        }
        return dp[n-1][W];
    }
}

// SPACE OPTIMIZATION 
class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        int n = val.length;
        int prev[] = new int[W+1];
        int curr[] = new int[W+1];
        for(int i=wt[0];i<=W;i++){
            prev[i] = val[0];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<=W;j++){
                int nT = prev[j];
                int T = Integer.MIN_VALUE;
                if(wt[i] <= j){
                    T = val[i] + prev[j-wt[i]];
                }
                curr[j] = Math.max(nT, T);
            }
            prev = curr.clone();
        }
        return prev[W];
    }
}
