// RECURSION + MEMOIZATION
// User function Template for Java

class Solution {
    static int dp[][];
    static int ans = Integer.MIN_VALUE;
    public int lcs(String s1, String s2, int n, int m){
        if(n<0 || m<0){
            return 0;
        }
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(s1.charAt(n) == s2.charAt(m)){
            dp[n][m] = 1 + lcs(s1, s2, n-1, m-1);
            ans = Math.max(ans, dp[n][m]);
        }
        else{
            dp[n][m] = 0;
        }
        lcs(s1, s2, n-1, m);
        lcs(s1, s2, n, m-1);
        return dp[n][m];
    }
    public int longestCommonSubstr(String s1, String s2) {
        ans = Integer.MIN_VALUE;
        int n = s1.length();
        int m = s2.length();
        dp = new int[n+1][m+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                dp[i][j] = -1;
            }
        }
        lcs(s1, s2, n-1, m-1);
        if(ans == Integer.MIN_VALUE) return 0;
        return ans;
    }
}
// TABULATION
static int dp[][]; 
static int result = 0;

static void lcsubstr(String s1, String s2) {
    int n = s1.length();
    int m = s2.length();
    dp = new int[n+1][m+1];

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (s1.charAt(i-1) == s2.charAt(j-1)) {
                dp[i][j] = 1 + dp[i-1][j-1];
                result = Math.max(result, dp[i][j]); 
            } else {
                dp[i][j] = 0;
            }
        }
    }
}
