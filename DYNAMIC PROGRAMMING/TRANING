// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    public int mP(int arr[][], int day, int last){
        if(day == 0){
            int maxi = 0;
            for(int i=0;i<3;i++){
                if(i!=last){
                    maxi = Math.max(maxi, arr[0][i]);
                }
            }
            return maxi;
        }
        if(dp[day][last]!=-1){
            return dp[day][last];
        }
        int maxi = 0;
        for(int i=0;i<3;i++){
            if(i!=last){
                int points = arr[day][i] +  mP(arr, day - 1, i);
                maxi = Math.max(points, maxi);
            }
        }
        return dp[day][last] = maxi;
    }
    public int maximumPoints(int arr[][]) {
        int n = arr.length;
        dp = new int[n][4];
        for(int i=0;i<n;i++){
            for(int j=0;j<4;j++){
                dp[i][j] = -1;
            }
        }
        return mP(arr, n-1, 3);
    }
}
// TABULATION 
public int maximumPoints(int[][] arr) {
    int n = arr.length;
    int[][] dp = new int[n][4];

    dp[0][0] = Math.max(arr[0][1], arr[0][2]);
    dp[0][1] = Math.max(arr[0][0], arr[0][2]);
    dp[0][2] = Math.max(arr[0][0], arr[0][1]);
    dp[0][3] = Math.max(arr[0][0], Math.max(arr[0][1], arr[0][2]));

    for (int day = 1; day < n; day++) {
        for (int last = 0; last < 4; last++) {
            dp[day][last] = 0;
            for (int task = 0; task < 3; task++) {
                if (task != last) {
                    int point = arr[day][task] + dp[day - 1][task];
                    dp[day][last] = Math.max(dp[day][last], point);
                }
            }
        }
    }

    return dp[n - 1][3];
}

// SPACE OPTMIZAZTION
public int maximumPoints(int[][] arr) {
    int n = arr.length;
    int[] prev = new int[4];

    prev[0] = Math.max(arr[0][1], arr[0][2]);
    prev[1] = Math.max(arr[0][0], arr[0][2]);
    prev[2] = Math.max(arr[0][0], arr[0][1]);
    prev[3] = Math.max(arr[0][0], Math.max(arr[0][1], arr[0][2]));

    for (int day = 1; day < n; day++) {
        int[] temp = new int[4];
        for (int last = 0; last < 4; last++) {
            temp[last] = 0;
            for (int task = 0; task < 3; task++) {
                if (task != last) {
                    int point = arr[day][task] + prev[task];
                    temp[last] = Math.max(temp[last], point);
                }
            }
        }
        prev = temp;
    }

    return prev[3];
}
