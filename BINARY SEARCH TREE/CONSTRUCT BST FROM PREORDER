
class TreeNode {

    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

public class ContructBstInPreOrder {

    public static TreeNode solveBst(TreeNode root, int v) {
        if (root == null) {
            return new TreeNode(v);
        }

        if (root.val > v) {
            root.left = solveBst(root.left, v);
        } else {
            root.right = solveBst(root.right, v);
        }

        return root;
    }

    public static TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root = null;
        for (int i = 0; i < preorder.length; i++) {
            root = solveBst(root, preorder[i]);
        }
        return root;
    }

    // Utility function to print inorder traversal of the tree
    public static void printInorder(TreeNode root) {
        if (root == null) {
            return;
        }
        printInorder(root.left);
        System.out.print(root.val + " ");
        printInorder(root.right);
    }

    public static void main(String[] args) {
        int[] preorder = {8, 5, 1, 7, 10, 12};

        TreeNode root = bstFromPreorder(preorder);

        System.out.print("Inorder Traversal of Constructed BST: ");
        printInorder(root);
    }
}
