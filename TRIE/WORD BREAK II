
import java.util.*;

public class WordBreakTwo {

    static List<String> re = new ArrayList<>();
    static StringBuilder str = new StringBuilder();

    public static class Node {

        Node children[];
        boolean eow;

        public Node() {
            children = new Node[26];
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
            eow = false;
        }
    }

    public static void insert(String word, Node root) {
        Node cur = root;
        for (int i = 0; i < word.length(); i++) {
            int ind = word.charAt(i) - 'a';
            if (cur.children[ind] == null) {
                cur.children[ind] = new Node();
            }
            cur = cur.children[ind];
        }
        cur.eow = true;
    }

    public static boolean search(String word, Node root) {
        Node cur = root;
        for (int i = 0; i < word.length(); i++) {
            int ind = word.charAt(i) - 'a';
            Node node = cur.children[ind];
            if (node == null) {
                return false;
            }
            cur = node;
        }
        return cur.eow;
    }

    public static void wB(String s, Node root) {
        if (s.length() == 0) {
            re.add(str.toString());
            return;
        }

        for (int i = 1; i <= s.length(); i++) {
            String fP = s.substring(0, i);
            String sP = s.substring(i, s.length());
            if (search(fP, root)) {
                int len = str.length();
                if (len != 0) {
                    str.append(" ");
                }
                str.append(fP);

                wB(sP, root);

                str.setLength(len);
            }
        }
    }

    public static List<String> wordBreak(String s, List<String> wordDict) {
        re.clear(); // clear previous results
        str.setLength(0); // clear previous string builder
        Node root = new Node();
        for (int i = 0; i < wordDict.size(); i++) {
            insert(wordDict.get(i), root);
        }
        wB(s, root);
        return re;
    }

    public static void main(String[] args) {

        // Example input
        String s = "catsanddog";
        List<String> wordDict = Arrays.asList("cat", "cats", "and", "sand", "dog");

        List<String> result = wordBreak(s, wordDict);

        System.out.println("Possible sentences:");
        for (String sentence : result) {
            System.out.println(sentence);
        }
    }
}
