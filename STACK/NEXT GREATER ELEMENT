
import java.util.ArrayList;

public class NextSmallerEle {

    // Node class for stack implementation
    static class Node {

        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Custom Stack class using linked list
    static class Stack {

        Node head = null;

        public boolean isEmpty() {
            return head == null;
        }

        public void add(int data) {
            Node newNode = new Node(data);
            newNode.next = head;
            head = newNode;
        }

        public void remove() {
            if (!isEmpty()) {
                head = head.next;
            }
        }

        public int peek() {
            if (isEmpty()) {
                return -1;
            }
            return head.data;
        }
    }

    // Function to return the next greater element for each element
    public static ArrayList<Integer> nextLargerElement(int[] arr) {
        ArrayList<Integer> list = new ArrayList<>();
        Stack sta = new Stack();

        // Traverse from right to left
        for (int i = arr.length - 1; i >= 0; i--) {
            int cur = arr[i];

            // Remove all elements smaller than or equal to current
            while (!sta.isEmpty() && sta.peek() <= cur) {
                sta.remove();
            }

            // If stack is empty, no greater element
            if (sta.isEmpty()) {
                list.add(0, -1);
            } else {
                list.add(0, sta.peek()); // Next greater element found
            }

            // Push current element to stack
            sta.add(cur);
        }

        return list;
    }

    // Optional main method to test
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 4};
        ArrayList<Integer> result = nextLargerElement(arr);
        System.out.println(result); // Output: [3, 4, 4, -1]
    }
}
